"""users_books rels.

Revision ID: b6993e7b4940
Revises: bc80799c494c
Create Date: 2025-06-30 02:50:42.261213

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "b6993e7b4940"
down_revision: str | None = "bc80799c494c"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "Reading",
        "Have read",
        "To read",
        "Favorites",
        name="book_shelf_enum",
    ).create(op.get_bind())
    sa.Enum(
        "Translated",
        "In progress",
        "Abandoned",
        "Absent",
        name="translation_status_enum",
    ).create(op.get_bind())
    op.create_table(
        "authors",
        sa.Column("author_id", sa.UUID(), nullable=False),
        sa.Column("author_name", sa.String(length=50), nullable=True),
        sa.Column("author_surname", sa.String(length=50), nullable=True),
        sa.PrimaryKeyConstraint("author_id"),
        sa.UniqueConstraint(
            "author_name",
            "author_surname",
            name="uq_author_name_author_surname",
        ),
    )
    op.create_table(
        "books",
        sa.Column("book_id", sa.UUID(), nullable=False),
        sa.Column("book_name", sa.String(length=50), nullable=False),
        sa.Column("book_country", sa.String(length=50), nullable=True),
        sa.Column("book_release_date", sa.DATE(), nullable=True),
        sa.Column(
            "book_translation_status",
            postgresql.ENUM(
                "Translated",
                "In progress",
                "Abandoned",
                "Absent",
                name="translation_status_enum",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("book_description", sa.String(length=1500), nullable=True),
        sa.Column("book_cover", sa.String(length=500), nullable=False),
        sa.PrimaryKeyConstraint("book_id"),
        sa.UniqueConstraint("book_name"),
    )
    op.create_table(
        "tags",
        sa.Column("tag_id", sa.UUID(), nullable=False),
        sa.Column("tag_name", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("tag_id"),
        sa.UniqueConstraint("tag_name"),
    )
    op.create_table(
        "users",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("username", sa.String(length=50), nullable=False),
        sa.Column("email", sa.String(length=50), nullable=False),
        sa.Column("password", sa.String(length=128), nullable=False),
        sa.Column("registration_date", sa.DATE(), nullable=True),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "books_authors",
        sa.Column("book_id", sa.UUID(), nullable=False),
        sa.Column("author_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["authors.author_id"],
        ),
        sa.ForeignKeyConstraint(
            ["book_id"],
            ["books.book_id"],
        ),
        sa.PrimaryKeyConstraint("book_id", "author_id"),
    )
    op.create_table(
        "books_tags",
        sa.Column("book_id", sa.UUID(), nullable=False),
        sa.Column("tag_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["book_id"],
            ["books.book_id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tags.tag_id"],
        ),
        sa.PrimaryKeyConstraint("book_id", "tag_id"),
    )
    op.create_table(
        "users_books",
        sa.Column("book_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "book_shelf",
            postgresql.ENUM(
                "Reading",
                "Have read",
                "To read",
                "Favorites",
                name="book_shelf_enum",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["book_id"],
            ["books.book_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("book_id", "user_id"),
    )
    op.create_table(
        "volumes",
        sa.Column("volume_id", sa.UUID(), nullable=False),
        sa.Column("book_id", sa.UUID(), nullable=False),
        sa.Column("volume_number", sa.Integer(), nullable=False),
        sa.Column("volume_name", sa.String(length=50), nullable=False),
        sa.ForeignKeyConstraint(
            ["book_id"],
            ["books.book_id"],
        ),
        sa.PrimaryKeyConstraint("volume_id"),
        sa.UniqueConstraint(
            "volume_number",
            "book_id",
            name="uq_volume_number_book_id",
        ),
    )
    op.create_table(
        "chapters",
        sa.Column("chapter_id", sa.UUID(), nullable=False),
        sa.Column("volume_id", sa.UUID(), nullable=False),
        sa.Column("chapter_number", sa.Integer(), nullable=False),
        sa.Column("chapter_name", sa.String(length=50), nullable=False),
        sa.Column("chapter_content", sa.TEXT(), nullable=False),
        sa.ForeignKeyConstraint(
            ["volume_id"],
            ["volumes.volume_id"],
        ),
        sa.PrimaryKeyConstraint("chapter_id"),
        sa.UniqueConstraint(
            "chapter_number",
            "volume_id",
            name="uq_chapter_number_volume_id",
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("chapters")
    op.drop_table("volumes")
    op.drop_table("users_books")
    op.drop_table("books_tags")
    op.drop_table("books_authors")
    op.drop_table("users")
    op.drop_table("tags")
    op.drop_table("books")
    op.drop_table("authors")
    sa.Enum(
        "Translated",
        "In progress",
        "Abandoned",
        "Absent",
        name="translation_status_enum",
    ).drop(op.get_bind())
    sa.Enum(
        "Reading",
        "Have read",
        "To read",
        "Favorites",
        name="book_shelf_enum",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
